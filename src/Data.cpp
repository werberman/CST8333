/**
 * @file Data.cpp
 * @author Kristopher Houston - 041015388
 * @brief Contains all data classes and error classes
 * @version 2.1
 * @date 2022-02-18
 *
 * @copyright Copyright (c) 2022
 *
 */
#ifndef IOSTREAM
#define IOSTREAM
#include <iostream>
#endif
#ifndef FSTREAM
#define FSTREAM
#include <fstream>
#endif
#ifndef STRING
#define STRING
#include <string>
#endif
#ifndef VECTOR
#define VECTOR
#include <vector>
#endif
#ifndef SSTREAM
#define SSTREAM
#include <sstream>
#endif

using namespace std;

/**
 * @brief vector of vectors of strings (vector<vector<string>>) containing all the rows of data loaded from a csv (this does NOT include the headers).
 * Each row is a separate vector, each column therein is a string in said vector.
 *
 */
class Data_Rows
{
private:
    std::vector<vector<string>> column_data;

public:
    void setColumn_data(std::vector<vector<string>> col)
    {
        column_data = col;
    }

    std::vector<vector<string>> getColumn_data()
    {
        return column_data;
    }
};

/**
 * @brief Vector of strings containing all column headers (or, in their absense, the first record) from a csv file.
 * Each column is stored as a string.
 *
 */
class Data_Headers
{
private:
    std::vector<string> column_headers;

public:
    void setColumn_headers(std::vector<string> head)
    {
        column_headers = head;
    }

    std::vector<string> getColumn_headers()
    {
        return column_headers;
    }
};

/**
 * @brief Contains a vector of strings listing every incident number (each vector should be a single string long).
 * This is used primarily for searches, as it is intended to be used on the primary key of a given csv.
 *
 */
class Row_Key
{
private:
    std::vector<string> incident_numbers;

public:
    void setIncident_numbers(std::vector<string> ino)
    {
        incident_numbers = ino;
    }

    std::vector<string> getIncident_numbers()
    {
        return incident_numbers;
    }
};

/**
 * @brief a bundle of all of the data (Data_Headers, Data_Rows, Row_Key) generated by loading a csv file. This is public
 * to make data transfer and access easier (all data types contained herein are private and must be accessed via
 * setter/getter).
 *
 */
struct Data_Bundle
{
    Data_Headers data_headers;
    Data_Rows data_rows;
    Row_Key row_keys;
};

/**
 * @brief Used for generating statistics maps
 *
 */
class Stats_Map_Obj
{
private:
    std::string name;
    int number;

public:
    void setName(std::string n)
    {
        name = n;
    }
    void setNumber(int i)
    {
        number = i;
    }

    std::string getName()
    {
        return name;
    }
    int getNumber()
    {
        return number;
    }
};

/*************************************** Errors ******************************/

/**
 * @brief throw an error for when the reader cannot read the .csv file
 * 
 */
struct Read_Exception : public exception
{
    const char *what() const throw()
    {
        return "Reader Exception";
    }
};

/**
 * @brief throw an error for when the writer cannot write to a file
 * 
 */
struct Write_Exception : public exception
{
    const char *what() const throw()
    {
        return "File Write Exception";
    }
};

/**
 * @brief throw an exception for when the end of the records has been reached
 * 
 */
struct End_of_Records_Exception : public exception
{
    const char *what() const throw()
    {
        return "End of Records Reached";
    }
};

// struct Input_Error : public exception
// {
//     const char * what () const throw ()
//     {
//         return "Invalid Input Exception";
//     }
// };